---
import { ISbStoryData, useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import {
  FooterStoryblok,
  HeaderStoryblok,
  PageStoryblok,
} from "../generated/component-types-sb";
import BaseLayout from "../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  function stripSlashes(str) {
    str = str.startsWith("/") ? str.substring(1, str.length) : str;
    return str.endsWith("/") ? str.substring(0, str.length - 1) : str;
  }
  const storyblokApi = useStoryblokApi();

  const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;
  const { data } = await storyblokApi.get("cdn/links", {
    version: apiVersion,
  });

  let links = data.links;
  links = Object.values(links);
  const translatedPaths = [];
  const pathsWithoutFolders = links
    .filter((link) => {
      return !link.is_folder;
    })
    .filter((link) => !link.slug.startsWith("pages/"))
    .filter((link) => !link.slug.startsWith("en/pages/"))
    .filter((link) => !link.slug.startsWith("config/"));

  pathsWithoutFolders.forEach((link) => {
    link.alternates.forEach((altPath) => {
      translatedPaths.push({
        params: {
          path:
            altPath.path === "home"
              ? "en"
              : stripSlashes("en/" + stripSlashes(altPath.path)),
        },
      });
    });
  });

  const paths = pathsWithoutFolders.map((link) => {
    const slug = link.slug;
    const result = {
      params: {
        path:
          slug === "home"
            ? undefined // Astro needs undefined instead of '/' for the root path
            : stripSlashes(slug), // Astro doesn't like leading and trailing slashes
      },
    };

    return result;
  });

  const allPaths = [...paths, ...translatedPaths];

  return allPaths;
}
let { path } = Astro.params;

path = path === undefined ? "home" : path; // Astro needs undefined, Storyblok an empty string

path = path === "en" ? "en/home" : path; // Astro needs undefined, Storyblok an empty string

let language = "de";

if (path.startsWith("en/")) {
  path = path.substring(3, path.length);
  language = "en";
}

const storyblokApi = useStoryblokApi();

const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;

const { data } = await storyblokApi
  .get(`cdn/stories`, {
    by_slugs: "config/header,config/footer",
    version: apiVersion,
    language,
    resolve_links: "url",
  })
  .catch((error) => {
    throw new Error(`Error getting data for path '${path}'`, {
      cause: error,
    });
  });

const { data: pageData } = await storyblokApi
  .get(`cdn/stories/${path}/`, {
    version: apiVersion,
    language,
  })
  .catch((error) => {
    throw new Error(`Error getting data for path '${path}'`, {
      cause: error,
    });
  });

const header: ISbStoryData<HeaderStoryblok> = data.stories.find(
  (story) => story.content.component === "header"
);
const footer: ISbStoryData<FooterStoryblok> = data.stories.find(
  (story) => story.content.component === "footer"
);
const page: ISbStoryData<PageStoryblok> = pageData.story;

if (data.stories.length !== 2) {
  throw new Error(
    `Expected to get 2 Stories from API for path '${path}': Header, Footer. Only ${data.stories.length} Stories were returned.`
  );
}
---

<BaseLayout seo={page?.content.seo} lang={language}>
  <StoryblokComponent
    blok={page.content}
    headerBlok={header.content}
    footerBlok={footer.content}
    path={path}
  />
</BaseLayout>
