---
import { ISbStoryData, useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import {
  FooterStoryblok,
  HeaderStoryblok,
  PageStoryblok,
} from "../generated/component-types-sb";
import BaseLayout from "../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  function stripSlashes(str) {
    str = str.startsWith("/") ? str.substring(1, str.length) : str;
    return str.endsWith("/") ? str.slice(0, -1) : str;
  }
  const storyblokApi = useStoryblokApi();

  const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;
  const { data } = await storyblokApi.get("cdn/links", {
    version: apiVersion,
    starts_with: "pages/",
  });

  let links = data.links;
  links = Object.values(links);
  const paths = links
    .filter((link) => {
      return !link.is_folder;
    })
    .map((link) => {
      const real_path = link.real_path;
      const result = {
        params: {
          path:
            real_path === "/"
              ? undefined // Astro needs undefined instead of '/' for the root path
              : stripSlashes(real_path), // Astro doesn't like leading and trailing slashes
        },
        props: { story: link.slug, uuid: link.uuid },
      };
      return result;
    });

  return paths;
}
let { path } = Astro.params;
let { story, uuid } = Astro.props;

const storyblokApi = useStoryblokApi();

const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;

const { data } = await storyblokApi
  .get(`cdn/stories`, {
    by_uuids_ordered:
      "44774b71-e375-4d91-be19-46d30588bb1d,82edee64-5bb4-4cf9-b0c5-8a324b9fa130," + // first uuid is the header, second the footer, last the page
      uuid,
    version: apiVersion,
  })
  .catch((error) => {
    throw new Error(
      `Error getting data for path '${path}' and story '${story}'`,
      {
        cause: error,
      }
    );
  });

if (data.stories.length !== 3) {
  throw new Error(
    `Expected to get 3 Stories from API for path '${path}': Header, Footer and Page. Only ${data.stories.length} Stories were returned.`
  );
}

const header: ISbStoryData<HeaderStoryblok> = data.stories[0];
const footer: ISbStoryData<FooterStoryblok> = data.stories[1];
const page: ISbStoryData<PageStoryblok> = data.stories[2];
---

<BaseLayout seo={page?.content.seo}>
  <StoryblokComponent
    blok={page.content}
    headerBlok={header.content}
    footerBlok={footer.content}
    path={path}
  />
</BaseLayout>
