---
import { ISbStoryData, useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import {
  FooterStoryblok,
  HeaderStoryblok,
  PageStoryblok,
} from "../generated/component-types-sb";
import BaseLayout from "../layouts/BaseLayout.astro";

export async function getStaticPaths() {
  function stripSlashes(str) {
    str = str.startsWith("/") ? str.substring(1, str.length) : str;
    return str.endsWith("/") ? str.substring(0, str.length - 1) : str;
  }
  const storyblokApi = useStoryblokApi();

  const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;
  const { data } = await storyblokApi.get("cdn/links", {
    version: apiVersion,
    starts_with: "pages/",
  });

  let links = data.links;
  links = Object.values(links);
  const paths = links
    .filter((link) => {
      return !link.is_folder;
    })
    .map((link) => {
      const real_path = link.real_path;
      const result = {
        params: {
          path:
            real_path === "/"
              ? undefined // Astro needs undefined instead of '/' for the root path
              : stripSlashes(real_path), // Astro doesn't like leading and trailing slashes
        },
      };
      return result;
    });

  return paths;
}
let { path } = Astro.params;

path = path === undefined ? "" : path; // Astro needs undefined, Storyblok an empty string

const storyblokApi = useStoryblokApi();

const apiVersion = import.meta.env.PUBLIC_STORYBLOK_API_VERSION;

// load header, footer and page in one request to reduce throttling
const { data } = await storyblokApi
  .get(`cdn/stories`, {
    // query for the page slug twice because startpages need a trailing slash and regular pages don't...
    by_slugs: "header,footer," + "pages/" + path + "/," + "pages/" + path,
    version: apiVersion,
  })
  .catch((error) => {
    throw new Error(`Error getting data for path '${path}'`, {
      cause: error,
    });
  });

const header: ISbStoryData<HeaderStoryblok> = data.stories.find(
  (story) => story.content.component === "header"
);
const footer: ISbStoryData<FooterStoryblok> = data.stories.find(
  (story) => story.content.component === "footer"
);
const page: ISbStoryData<PageStoryblok> = data.stories.find(
  (story) => story.content.component === "page"
);

if (data.stories.length !== 3) {
  throw new Error(
    `Expected to get 3 Stories from API for path '${path}': Header, Footer and Page. Only ${data.stories.length} Stories were returned.`
  );
}
---

<BaseLayout seo={page?.content.seo}>
  <StoryblokComponent
    blok={page.content}
    headerBlok={header.content}
    footerBlok={footer.content}
    path={path}
  />
</BaseLayout>
