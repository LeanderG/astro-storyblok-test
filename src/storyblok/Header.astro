---
import { storyblokEditable } from "@storyblok/astro";
import InlineIcon from "../components/InlineIcon.astro";
import { HeaderStoryblok } from "../generated/component-types-sb";

interface Props {
  blok: HeaderStoryblok;
  path: string;
}

const { blok, path } = Astro.props;

const segments = path === undefined ? [] : path.match(/[^\/]+/g);

const listItems = blok.navigation_items.map(getNavigationItems(0));

function getNavigationItems(segmentId: number) {
  return (navigation_item) => {
    const full_slug = navigation_item.link.story.full_slug; // internal url
    const url = navigation_item.link.url; // external url
    const text = navigation_item.text;
    const target = navigation_item.link.target;

    const href = url || "/" + full_slug;

    const isActive =
      segments?.[segmentId] !== undefined &&
      segments?.[segmentId] === full_slug.match(/[^\/]+/g)?.[segmentId];

    let subnav = navigation_item.subnavigation_items.map(
      getNavigationItems(segmentId + 1)
    );
    return { href, text, isActive, target, subnav };
  };
}
---

<style>
  .logo::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: #fff500;
  }

  .second-row::before {
    position: absolute;
    content: "";
    height: 1px;
    width: calc(100% - 1rem);
    margin: -1px 0.5rem;
    background: #b7bbbd;
  }

  @media screen(lg) {
    .active-arrow::after {
      content: "";
      left: 50%;
      position: absolute;
      margin-top: 0;
      width: 0;
      height: 0;
      transform: translate(-50%, -25%) rotate(1turn);
      border-style: solid;
      border-width: 0 8px 6px;
      border-color: transparent transparent #b7bbbd;
      bottom: -1px;
    }
  }
</style>

<header class="bg-petrol" {...storyblokEditable(blok)}>
  <div class="container mx-auto max-w-screen-lg">
    <div class="relative bg-gelb w-36 py-5">
      <a href="/" class="logo">
        <InlineIcon filename={blok.logo.filename} />
        <span class="sr-only">comdirect</span>
      </a>
    </div>
    <nav>
      <ul class="flex flex-col lg:flex-row lg:gap-x-2 mt-2 flex-wrap">
        {
          listItems.map((item) => (
            <>
              <li
                class={
                  item.isActive && item.subnav.length > 0
                    ? "active-arrow relative"
                    : "relative"
                }
              >
                <a
                  class={
                    (item.isActive
                      ? "text-gelb"
                      : "text-white focus:text-gruen") +
                    "  hover:text-gelb font-bold inline-block p-2"
                  }
                  href={item.href}
                  target={item.target}
                >
                  {item.text}
                </a>
              </li>
              {
                <li
                  class={
                    item.isActive && item.subnav.length > 0
                      ? "order-1 w-full relative"
                      : "hidden"
                  }
                >
                  <ul class="flex flex-row gap-4 second-row">
                    {item.subnav.map((subnavItem) => (
                      <li>
                        <a
                          class={
                            (subnavItem.isActive
                              ? "text-gelb"
                              : "text-white focus:text-gruen") +
                            " hover:text-gelb font-medium inline-block p-2"
                          }
                          href={subnavItem.href}
                          target={subnavItem.target}
                        >
                          {subnavItem.text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </li>
              }
            </>
          ))
        }
      </ul>
    </nav>
  </div>
</header>
